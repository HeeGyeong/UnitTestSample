plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'jacoco'
}

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.example.uiteststudy"
        minSdkVersion 23
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    //  Robolectric 을 사용하는 단위 테스트를 만들기 위한 설정.
    testOptions {
        unitTests.includeAndroidResources = true
        // return 시 exception 대신에 default Value 를 return 하도록 설정.
        unitTests.returnDefaultValues = true

        unitTests.all {
            jacoco {
                // Test 타입의 파일을 모두 확인하기 위하여 설정.
                includeNoLocationClasses = true
                // java.lang.NoClassDefFoundError: jdk/internal/reflect/GeneratedSerializationConstructorAccessor1
                // 해당 오류가 발생할 경우 추가.
                excludes = ['jdk.internal.*']
            }
        }
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'

    // Espresso
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    // Trust
    testImplementation "com.google.truth:truth:1.1.3"
    // Mockito
    testImplementation "org.mockito:mockito-core:3.6.0"
    // Kotlin 으로 사용 시 발생하는 Mockito cannot mock/spy because : - final class 에러 해결을 위해 inline 추가.
    testImplementation 'org.mockito:mockito-inline:3.6.0'
    // InstrumentedTest 에서 사용하기 위해 적용.
    androidTestImplementation 'org.mockito:mockito-android:3.6.0'
    androidTestImplementation "com.google.truth:truth:1.1.3"
    // Test Implement
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    // androidx 를 사용하는 경우, com.android.support 를 사용하게 되면 충돌이 발생하여 정상 동작을 하지 않는 것으로 보인다.
//    androidTestImplementation 'com.android.support.test:runner:1.0.2'
//    androidTestImplementation 'com.android.support.test:rules:1.0.2'
}

// dependsOn : 유닛 테스트를 수행하는 태스크 이름으로 설정.
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    // reports 생성 확장자
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def mainSrc = "${project.projectDir}/src/main/java"
    sourceDirectories.setFrom(files([mainSrc])) // 커버리지를 측정할 소스 디렉터리

    // 커버리지에서 제외할 파일
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    classDirectories.setFrom(files([debugTree])) // 컴파일 결과 파일이 있는 디렉터리 지정.

    // 커버리지 측정 결과를 저장할 파일
    executionData.setFrom(fileTree(dir: "${buildDir}/jacoco/testDebugUnitTest.exec"))
}